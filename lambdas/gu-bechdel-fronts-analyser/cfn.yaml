AWSTemplateFormatVersion: "2010-09-09"
Description: Bechdel Test Fronts Analyser

Parameters:
  Stage:
    Description: Environment name
    Type: String
    AllowedValues:
    - PROD
    - CODE
  BatchOnePaths:
    Description: Batch one paths
    Type: String
    Default: "/uk,/us,/au,/international"

  Stack:
    Description: Stack name
    Type: String
    Default: ophan
  App:
    Description: App name
    Type: String
    Default: gu-bechdel-fronts-analyser
  CapiKey:
    Description: Capi key
    Type: String
    Default: xxx
  PGUSER:
    Description: Postgres user
    Type: String
    Default: bechdelmaster
  PGHOST:
    Description: PGHOST
    Type: String
    Default: bechdel-fronts.cii9twl865uw.eu-west-1.rds.amazonaws.com
  PGPASSWORD:
    Description: Pghost
    Type: String
  PGDATABASE:
    Description: pg database
    Type: String
    Default: fronts
  PGPORT:
    Description: postgres ports
    Type: Number
    Default: 5432
  GOOGLEAPPLICATIONCREDENTIALS:
    Description: Google GOOGLE_APPLICATION_CREDENTIALS
    Type: String
    Default: test

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"


  # Event rule that triggers the first lambda every 5 minutes
  BatchOneLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 16 * * ? *)
      Targets:
      - Id: BatchOneLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/uk,/us,/au,/international,/uk/culture,/us/culture,/au/culture,/uk/business,/us/business\"}"
  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchOneLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchOneLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchTwoLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(10 16 * * ? *)
      Targets:
      - Id: BatchTwoLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/au/business,/uk/money,/uk/commentisfree,/us/commentisfree,/au/commentisfree,/uk/environment,/us/environment,/au/environment\"}"
  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchTwoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchTwoLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchThreeLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(15 16 * * ? *)
      Targets:
      - Id: BatchThreeLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/uk/technology,/us/technology,/au/technology,/uk/sport,/us/sport,/au/sport,/uk/media,/us/media\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchThreeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchThreeLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchFourLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(30 16 * * ? *)
      Targets:
      - Id: BatchFourLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/au/media,/books,/music,/film,/us/film,/au/film,/uk/film\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchFourLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchFourLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchFiveLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(40 16 * * ? *)
      Targets:
      - Id: BatchFiveLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/artanddesign,/stage,/tv-and-radio,/fashion,/lifeandstyle,/politics,/science\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchFiveLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchFiveLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchSixLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(50 16 * * ? *)
      Targets:
      - Id: BatchSixLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/football,/travel,/world,/uk-news,/us-news,/australia-news,/observer,/video\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchSixLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchSixLambdaRule, Arn]

  # Lambda that querys the flexible API
  BatchOneLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: ophan-dist
        S3Key: !Sub '${Stack}/${Stage}/${App}/${App}.zip'
      FunctionName: !Sub ${App}-BatchOne-${Stage}
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt [LambdaRole, Arn]
      Runtime: nodejs6.10
      Timeout: 300
      Environment:
        Variables:
          Stage: !Ref Stage
          Paths: !Ref BatchOnePaths
          CapiKey: !Ref CapiKey
          PGUSER: !Ref PGUSER
          PGHOST: !Ref PGHOST
          PGPASSWORD: !Ref PGPASSWORD
          PGPORT: !Ref PGPORT
          GOOGLECREDS: !Ref GOOGLEAPPLICATIONCREDENTIALS
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/creds.json'

  BechdelConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "bechdel-config-bucket"
      Tags:
        -
          Key: "Owner"
          Value: "Jonathan Rankin"

  BechdelBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BechdelConfigBucket
      PolicyDocument:
        Statement:
          -
            Sid: Access-to-Guardian-Office-Only
            Principal: "*"
            Action: "s3:*"
            Effect: Allow
            Resource:
              - Fn::Join: ["", ["arn:aws:s3:::", {Ref: BechdelConfigBucket}]]
              - Fn::Join: ["", ["arn:aws:s3:::", {Ref: BechdelConfigBucket}, "/*"]]
            Condition:
              IpAddress:
                aws:sourceIp: "77.91.248.0/21"
