AWSTemplateFormatVersion: "2010-09-09"
Description: Bechdel Test Fronts Analyser

Parameters:
  Stage:
    Description: Environment name
    Type: String
    AllowedValues:
    - PROD
    - CODE
    Default: PROD

  BatchOnePaths:
    Description: Batch one paths
    Type: String
    Default: "/uk,/us,/au,/international"

  Stack:
    Description: Stack name
    Type: String
    Default: playground
  App:
    Description: App name
    Type: String
    Default: gu-bechdel-fronts-analyser
  CapiKey:
    Description: Capi key
    Type: String
    Default: xxx
  PGUSER:
    Description: Postgres user
    Type: String
    Default: bechdelmaster
  PGHOST:
    Description: PGHOST
    Type: String
    Default: bechdel-store-prod.c0gunnrs6vkk.eu-west-1.rds.amazonaws.com
  PGPASSWORD:
    Description: Pghost
    Type: String
    Default: test1234
  PGDATABASE:
    Description: pg database
    Type: String
    Default: fronts
  PGPORT:
    Description: postgres ports
    Type: Number
    Default: 5432
  GOOGLEAPPLICATIONCREDENTIALS:
    Description: Google GOOGLE_APPLICATION_CREDENTIALS
    Type: String
    Default: test

Resources:
  BechdelVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.248.132.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        VpcId: !Ref BechdelVPC
        InternetGatewayId: !Ref InternetGateway
    DependsOn: BechdelVPC
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BechdelVPC
      CidrBlock: 10.248.132.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-west-1a
    DependsOn: BechdelVPC
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BechdelVPC
      CidrBlock: 10.248.134.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-west-1b
    DependsOn: BechdelVPC
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BechdelVPC
      CidrBlock: 10.248.133.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: eu-west-1c
    DependsOn: BechdelVPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BechdelVPC
    DependsOn: BechdelVPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC

  BechdelSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    DependsOn:
    - SubnetA
    - SubnetB
    - SubnetC
    Properties:
      DBSubnetGroupDescription: Subnet group
      DBSubnetGroupName: BechdelSubnetGroup
      SubnetIds:
      - Ref: SubnetA
      - Ref: SubnetB
      - Ref: SubnetC
      Tags:
        - Key: Stack
          Value: !Ref 'Stack'
        - Key: Stage
          Value: !Ref 'Stage'



  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "Http traffic in, all traffic out."
      VpcId: !Ref BechdelVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
    DependsOn: BechdelVPC

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: ec2
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"


  # Event rule that triggers the first lambda every 5 minutes
  BatchOneLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 16 * * ? *)
      Targets:
      - Id: BatchOneLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/uk,/us,/au,/international,/uk/culture,/us/culture,/au/culture,/uk/business,/us/business\"}"
  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchOneLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchOneLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchTwoLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(10 16 * * ? *)
      Targets:
      - Id: BatchTwoLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/au/business,/uk/money,/uk/commentisfree,/us/commentisfree,/au/commentisfree,/uk/environment,/us/environment,/au/environment\"}"
  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchTwoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchTwoLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchThreeLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(15 16 * * ? *)
      Targets:
      - Id: BatchThreeLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/uk/technology,/us/technology,/au/technology,/uk/sport,/us/sport,/au/sport,/uk/media,/us/media\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchThreeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchThreeLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchFourLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(30 16 * * ? *)
      Targets:
      - Id: BatchFourLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/au/media,/books,/music,/film,/us/film,/au/film,/uk/film\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchFourLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchFourLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchFiveLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(40 16 * * ? *)
      Targets:
      - Id: BatchFiveLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/artanddesign,/stage,/tv-and-radio,/fashion,/lifeandstyle,/politics,/science\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchFiveLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchFiveLambdaRule, Arn]

  # Event rule that triggers the first lambda every 5 minutes
  BatchSixLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(50 16 * * ? *)
      Targets:
      - Id: BatchSixLambdaRule
        Arn: !GetAtt [BatchOneLambda, Arn]
        Input:  "{ \"paths\" : \"/football,/travel,/world,/uk-news,/us-news,/australia-news,/observer,/video\"}"

  # Permission to allow the event rule to trigger the flexible querying lambda
  InvokeBatchSixLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BatchOneLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [BatchSixLambdaRule, Arn]

  # Lambda that querys the flexible API
  BatchOneLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: playground-dist
        S3Key: !Sub '${Stack}/${Stage}/${App}/${App}.zip'
      FunctionName: !Sub ${App}-BatchOne-${Stage}
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt [LambdaRole, Arn]
      Runtime: nodejs6.10
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - Ref: RDSSecurityGroupClients
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Environment:
        Variables:
          Stage: !Ref Stage
          Paths: !Ref BatchOnePaths
          CapiKey: !Ref CapiKey
          PGUSER: !Ref PGUSER
          PGHOST: !Ref PGHOST
          PGPASSWORD: !Ref PGPASSWORD
          PGPORT: !Ref PGPORT
          GOOGLECREDS: !Ref GOOGLEAPPLICATIONCREDENTIALS
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/creds.json'
    DependsOn:
    - BechdelVPC
    - SubnetA
    - SubnetB
    - SubnetC

  RDSSecurityGroupClients:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for instances and clients of RDS
      VpcId:
        Ref: BechdelVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  RDSSecurityGroupRules:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS security group rules
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref 'RDSSecurityGroupClients'
      Tags:
      - Key: Stack
        Value: !Ref 'Stack'
      - Key: Stage
        Value: !Ref 'Stage'
      VpcId:
        Ref: BechdelVPC

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS security group rules
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: sg-1399506e
      Tags:
      - Key: Stack
        Value: !Ref 'Stack'
      - Key: Stage
        Value: !Ref 'Stage'
      VpcId:
        Ref: BechdelVPC

  BechdelStore:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '100'
      AllowMajorVersionUpgrade: 'false'
      AutoMinorVersionUpgrade: 'true'
      AvailabilityZone: eu-west-1b
      DBInstanceClass: db.t2.small
      DBInstanceIdentifier: !Sub bechdel-store-${Stage}
      DBName:
        Ref: PGDATABASE
      Port: '5432'
      PubliclyAccessible: 'true'
      StorageType: gp2
      BackupRetentionPeriod: '7'
      MasterUsername:
        Ref: PGUSER
      MasterUserPassword:
        Ref: PGPASSWORD
      PreferredBackupWindow: 03:07-03:37
      PreferredMaintenanceWindow: wed:22:10-wed:22:40
      Engine: postgres
      EngineVersion: 9.5.2
      StorageEncrypted: 'true'
      LicenseModel: postgresql-license
      DBSubnetGroupName:
        Ref: BechdelSubnetGroup
      VPCSecurityGroups:
      - !Ref 'RDSSecurityGroupRules'
      - !Ref 'BastionSecurityGroup'
      Tags:
      - Key: Stack
        Value: !Ref 'Stack'
      - Key: Stage
        Value: !Ref 'Stage'
    DependsOn:
    - BechdelVPC
    - BechdelSubnetGroup
