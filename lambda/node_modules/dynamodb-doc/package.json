{
  "_from": "dynamodb-doc",
  "_id": "dynamodb-doc@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-gu0offdI2HC10CIzHHlVWUQ7jx0=",
  "_location": "/dynamodb-doc",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "dynamodb-doc",
    "fetchSpec": "latest",
    "name": "dynamodb-doc",
    "raw": "dynamodb-doc",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dynamodb-doc/-/dynamodb-doc-1.0.0.tgz",
  "_shasum": "82ed287df748d870b5d022331c795559443b8f1d",
  "_shrinkwrap": null,
  "_spec": "dynamodb-doc",
  "_where": "/Users/jonathan_rankin/dev/bechdel/lambda",
  "author": {
    "name": "Amazon Web Services",
    "url": "http://aws.amazon.com/"
  },
  "bugs": {
    "url": "https://github.com/awslabs/dynamodb-document-js-sdk/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "raymolin@amazon.com",
      "name": "Raymond Lin"
    },
    {
      "email": "lsegal@amazon.com",
      "name": "Loren Segal"
    }
  ],
  "dependencies": {
    "aws-sdk": "^2.0.19"
  },
  "deprecated": false,
  "description": "DynamoDB Document SDK for Javascript",
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^1.21.0",
    "uglify-js": "2.*"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/awslabs/dynamodb-document-js-sdk",
  "keywords": [
    "dynamodb",
    "document",
    "js",
    "javascript",
    "sdk"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://github.com/awslabs/dynamodb-document-js-sdk/blob/master/LICENSE.txt"
    }
  ],
  "main": "lib/dynamodb-doc.js",
  "name": "dynamodb-doc",
  "optionalDependencies": {},
  "readme": "# DynamoDB Document SDK\n\nThis SDK abstracts away the typing of attribute values in the low level SDK in order to provide a simpler developing experience.\nJS datatypes like `string` or `number` can be passed directly into DynamoDB requests and the wrapping will be handled for you; similarly for responses, datatypes will be unwrapped.\n\nFor those DynamoDB types that do not have direct mappings to JS datatypes, a wrapper Object is provided to handle type ambiguities (i.e. StrSet, NumSet, BinSet).\n\nLastly, a Condition Object is being introduced to simplify the use of the KeyCondition and Expected portion of the request params.\nNote: Condition Object serves to simplify previous api (NOT new expressions)\n\n## Getting Started\n\nIn order to instantiate the client, you still need the [AWS JS SDK](https://github.com/aws/aws-sdk-js) to store your region/credentials.\n\n``` javascript\nvar AWS = require(\"aws-sdk\");\nvar DOC = require(\"dynamodb-doc\");\n\nAWS.config.update({region: \"us-west-1\"});\n\nvar docClient = new DOC.DynamoDB();\n```\n\nAlternatively if you already have the existing DynamoDB Client, you can pass it in order to instantiate the client.\n\n``` javascript\n// assumes AWS.config is set up already\nvar awsClient = AWS.DynamoDB();\nvar docClient = new DOC.DynamoDB(awsClient);\n```\n\nAfter this, you can make requests and receive responses with JS datatypes!\n\nJS datatypes that can be used in place of DynamoDB Datatypes:\n\n|Javascript|  DynamoDB  |\n|:--------:|:----------:|\n|string    |     S      |\n|number    |     N      |\n|boolean   |     BOOL   |\n|null      |     NULL   |\n|array     |     L      |\n|object    |     M      |\n\n\nFor Sets, the client will provide object for you:\n\n``` javascript\ndocClient.Set([\"a\", \"b\", \"c\"], \"S\")\n```\n\nRefer to the *Basic Usage* and *Nested DataTypes and More* sections down below to see examples of the updated API.\n\nIn addition, the SDK also introduces a special kind of Object in order to simplify conditions.\n\n``` javascript\ndocClient.Condition(key, operator, val1, val2)\n```\n\nRefer to the section down below on *Condition Objects* to see an example of the usage.\n\n**NOTE:** To build the node js files for the browser yourself, run\n\n``` bash\nnpm install; uglifyjs lib/* | sed 's/\\\"use strict\\\";//' > dynamodb-doc.min.js\n# sed portion is optional depending on your use case\n```\n\nFor each example assume we have these variables available to us.\n\n``` javascript\n// Basic Client creation\nAWS.config.update({ /* ...your config... */ });\ndocClient = new DOC.DynamoDB();\n\n// Basic Callback\nvar pfunc = function(err, data) { \n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n    }\n}\n```\n\n## Basic Usage:\n\n``` javascript\n// Basic Scalar Datatypes\nvar params = {};\nparams.TableName = \"Users\";\nparams.Item = {UserId : \"John\",\n               Age    : 21,\n               Pic    : docClient.StrToBin(\"someURI\")};\n\ndocClient.putItem(params, pfunc);\n\nparams = {};\nparams.TableName = \"Users\";\nparams.Key = {UserId : \"John\"}\n\ndocClient.getItem(params, pfunc); \n\n/* Response\n{Item: {UserId : \"John\",\n       Age     : 21,\n       Pic     : Bin}} \n*/\n```\n\n**NOTE:** StrToBin returns either a `Buffer` for NodeJS or `Uint8Array` for the browser.\n\n## Nested DataTypes and More:\n\n``` javascript\nvar params = {};\nparams.TableName = \"Shopping Cart\";\n\n// Compatible is a Map of Part to List of PartId's\n// OnSale is a BOOL type\n// Discount is a NULL type\nparams.Item = {PartId       : \"CPU1\",\n               OnSale       : false,\n               Discount     : null,\n               Compatible   : {Motherboards : [\"MB1\", \"MB2\"],\n                               RAM          : [\"RAM1\"]}};\n\ndocClient.putItem(params, pfunc);\n\nparams = {};\nparams.Key = {PartId : \"CPU1\"};\nparams.TableName = \"Shopping Cart\";\n\ndocClient.getItem(params, pfunc);\n\n/*Response\n{Item: {PartId : \"CPU1\",\n        OnSale : false,\n        Discount : null,\n        Compatible : {Motherboards : [\"MB1\", \"MB2\"],\n                      RAM          : [\"RAM1\"]}}};\n*/\n```\n\n## Condition Object:\n\n``` javascript\nvar params = {};\nparams.TableName = \"Houses\";\n\n// Note: This is a query on the Key Schema of the table.  \n// For queries on secondary indexes, specify params.IndexName = \"index-name\"\n\n// use an array of Condition Objects for multiple conditions\nparams.KeyConditions = [docClient.Condition(\"HouseId\", \"NOT_NULL\"),\n                        docClient.Condition(\"YearBuilt\", \"GT\", 2000)];\n\n// use a Condition Object for just a single condition\nparams.QueryFilter = docClient.Condition(\"Price\", \"BETWEEN\", 0, 900000);\n\ndocClient.query(params, pfunc);\n\n/*Reponse\n{Count: 3,\nItems: [ { HouseId   : \"123 amzn way\",\n           YearBuilt : 2001,\n           Price     : 450000},\n         { HouseId   : \"321 dynamo st\",\n           YearBuilt : 2012,\n           Price     : 100000},\n         { HouseId   : \"213 JS ave\",\n           YearBuilt : 2014,\n           Price     : 1}],\nScannedCount: 3}\n*/\n```\n\n## Expressions (NEW!!):\n\n``` javascript\nvar params = {};\nparams.TableName = \"SomeTable\";\nparams.Key = {Some : \"Key\"};\n    \n// Use the #(variable) to substitute in place of attribute Names\n// Use the :(variable) to subsitute in place of attribute Values\nparams.UpdateExpression = \"set #a = :x + :y\";\nparams.ConditionExpression = \"#a < :MAX and Price = :correct\";\nparams.ExpressionAttributeNames = {\"#a\" : \"Description\"};\nparams.ExpressionAttributeValues = {\":x\" : 20,\n                                    \":y\" : 45,\n                                    \":MAX\" : 100,\n                                    \":correct\" : \"is right!!\"};\n\ndocClient.updateItem(params, pfunc);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/awslabs/dynamodb-document-js-sdk.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "1.0.0"
}
